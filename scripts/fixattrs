#!/bin/bash -l

# applies all files in $FIXATTRS_PATH

# fixattrs file structure:
# path recursive user:group fmode dmode

# fixattrs file examples:

# /root/test-dir-one false joe:joe 0755 0777
# /root/test-dir-two true joe:joe 0755 0777

# /root/test-dir-three false joe:joe 0755 0777
# /root/test-dir-four/test-file-one false joe:joe 0777 0666
# /root/test-dir-four/test-file-two true joe:joe 0666 0777

readonly FIXATTRS_PATH=/etc/fixattrs.d
readonly PROTECTED_ROOTS=(/proc /sys /dev /boot)
readonly PROTECTED_PATHS=(/etc /var /lib /run /bin /home /mnt /usr /sbin /lib /lib64 /usr/bin /usr/include /usr/lib /usr/local /usr/sbin /usr/share /usr/src /var/lib /var/local /var/log /var/opt /var/lock /var/run)

function is-directory {
    [[ -d "$1" ]]
}

function is-file {
    [[ -a "$1" ]]
}

function dir-is-empty {
    (($(ls -A "$1" | wc -l) == 0))
}

function get-root {
    echo "$1" | cut -d'/' -f2
}

function normalize-path {
    echo "$1" | sed 's/\/$//'
}

function path-is-root {
    [[ $1 = '/' ]]
}

function path-is-protected-root {
    local path="$1"
    local root=$(get-root "$path")
    local dir
    for dir in "${PROTECTED_ROOTS[@]}"; do
        dir=$(get-root $dir)
        if [[ $dir = $root ]]; then
            return 0
        fi
    done
    return 1
}

function path-is-protected {
    local path=$(normalize-path "$1")
    local dir
    for dir in "${PROTECTED_PATHS[@]}"; do
        if [[ $dir = $path ]]; then
            return 0
        fi
    done
    return 1
}

function path-is-sane {
    local path="$1"
    if [[ -z $path ]]; then
        return 1
    elif path-is-root "$path"; then
        log::m-warn "path: $path is root, skipping ..."
        return 1
    elif path-is-protected-root "$path"; then
        log::m-warn "path: $path is a protected root directory, skipping ..."
        return 1
    elif path-is-protected "$path"; then
        log::m-warn "path: $path is a protected path, skipping ..."
        return 1
    elif path-is-nonexistant "$path"; then
        log::m-warn "path: $path doesn't exist, skipping ..."
        return 1
    else
        return 0
    fi
}

function path-exists {
    local path="$1"
    if is-directory "$path" || is-file "$path"; then
        return 0
    else
        return 1
    fi
}

function path-is-nonexistant {
    ! path-exists "$1"
}

function set-ownership {
    local path="$1"
    local recursive="$2"
    local owner="$3"

    local cmd=(chown)

    [[ $recursive = true ]] \
        && cmd+=(-R)
    cmd+=("$owner" "$path")
    set -- ${cmd[@]}
    (shopt -s dotglob; "$@")
}

function set-permissions {
    local path="$1"
    local recursive="$2"
    local fmode="$3"
    local dmode="$4"

    local dcmd=(find "$path")
    local fcmd=(find "$path")

    if [[ $recursive != true ]]; then
        dcmd+=(-mindepth 0 -maxdepth 0)
        fcmd+=(-mindepth 0 -maxdepth 1)
    fi

    dcmd+=(-type d)
    dcmd+=(-exec chmod $dmode {} \+)
    set -- ${dcmd[@]}
    "$@"

    fcmd+=(-type f)
    fcmd+=(-exec chmod $fmode {} \+)
    set -- ${fcmd[@]}
    "$@"
}

function log-msg {
    local path="$1"
    local recursive="$2"
    local owner="$3"
    local fmode="$4"
    local dmode="$5"
    local msg
    msg+="  $path "
    if [[ $recursive = true ]]; then
        msg+='recurse '
    fi
    msg+="o:$owner f:$fmode d:$dmode"
    log::m-info "$msg"
}

function apply-file {
    local file="$1"
    local path recursive owner fmode dmode
    log::m-info ": $file"
    while read path recursive owner fmode dmode; do
        path="${path//'~'/$HOME}"
        if path-is-sane "$path"; then
            log-msg "$path" $recursive "$owner" $fmode $dmode
            set-ownership "$path" $recursive "$owner"
            set-permissions "$path" $recursive $fmode $dmode
        fi
    done <"$file"
}


function main {
    local file
    if ! is-directory $FIXATTRS_PATH; then
        log::m-warn "$FIXATTRS_PATH doesn't exist, no ownerships or permissions to apply"
    elif is-directory $FIXATTRS_PATH && dir-is-empty $FIXATTRS_PATH; then
        log::m-warn "$FIXATTRS_PATH is empty, no ownerships or permissions to apply"
    else
        log::m-info "Applying ownership and permission fixes ..."
        for file in $FIXATTRS_PATH/*; do
            apply-file "$file"
        done
        echo
    fi
}

main
